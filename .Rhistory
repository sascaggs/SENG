# No loops
diag(simM) <- 0
simM
issuenet <- read.csv("IssueIssue_Data.csv", header=T)
class(issuenet)
dim(issuenet) #19 rows, 19 columns! A square.
class(issuenet)
issuenet <- as.matrix(issuenet)
head(issuenet)
tail(issuenet)
rownames(issuenet) <- colnames(issuenet) #Add row names
head(issuenet)
colnames(issuenet) <- rownames(issuenet) <- paste0("i_", colnames(issuenet))
head(issuenet)
diag(issuenet) <- 0
issuenet
#View(issuenet) #Can't run View() in R markdown knit
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
class(E)
colnames(E) <- c('Sender','Receiver')
E
class(E)
E <- rbind(E, c('i','j'))
E
E <- E[-4,]
E
set.seed(777)
N <- letters[1:5]
#or
N <- c("a","b","c","d","e")
simE <- expand.grid(N,N)
# ?expand.grid #help on this function.
simE
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
dim(simE)
head(simE) #notice 3 columns, including presence/absence of edge
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2] #Only include edges that have a value, and that aren't loops, only show Columns 1 and 2
head(simE)
aa <- read.csv("actor-actor_edgelist.csv")
head(aa)
aa$send <- paste0("a_", aa$send)
aa$receive <- paste0("a_", aa$receive)
class(aa)
aa <- as.matrix(aa)
dim(aa)
head(aa)
#install.packages('igraph')
library(igraph)
att <- data.frame(
name = c("i","j","k"),
size = c(20,27,34),
color = c('tomato',
'cornflowerblue',
'darkorchid')
)
att
M
class(M)
gM <- graph.adjacency(M)
class(gM)
gM
gM <- set_vertex_attr(gM, name = 'size', value = att$size)
gM <- set_vertex_attr(gM, name = 'color', value = att$color)
gM
E
class(E)
gE <- graph.data.frame(E)
#Add in the attributes
gE <- set_vertex_attr(gM, name = 'size', value = att$size)
gE <- set_vertex_attr(gM, name = 'color', value = att$color)
#Or, with one line of code to add attributes while we make igraph object:
gE <- graph.data.frame(E, vertices = att)
gE
class(gE)
V(gE)$color
V(gE)$size
plot(gE)
plot(gM)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681,
edge.curved = 0.1,
layout = layout.circle)
#install.packages('statnet', dependencies=T)
library(statnet)
library(statnet)
M
E
att
netM <- network(M, vertex.attr = att)
netE <- network(E, vertex.attr = att,
matrix.type = "edgelist" )
netM
netE
c(class(netM), class(netE))
netE %v% 'color'
aa_igraph <- graph.data.frame(aa)
class(aa_igraph)
plot(aa_igraph)
dim(aa)
plot(aa_igraph)
#messy!
plot(aa_igraph,
vertex.color = '#2a00fa',
vertex.size = 3,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1)
aa_shortened <- aa[1:100,]
dim(aa_shortened)
aa_igraph_shortened <- graph.data.frame(aa_shortened)
plot(aa_igraph_shortened,
vertex.color = '#2a00fa',
vertex.size = 7,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1)
issuenet
class(issuenet)
gissuenet <- graph.adjacency(issuenet, weighted = T)
plot(gissuenet,
vertex.color = '#2a00fa',
vertex.size = 7,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1,
edge.width=edge.betweenness(gissuenet)/10)
par(mfrow=c(2,2))
plota <- plot(gissuenet,
vertex.color = '#2a00fa',
vertex.size = 7,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1,
edge.width=edge.betweenness(gissuenet)/10,
layout=layout.circle,
main="circle")
plotb <- plot(gissuenet,
vertex.color = '#2a00fa',
vertex.size = 7,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1,
edge.width=edge.betweenness(gissuenet)/10,
layout=layout.sphere,
main="sphere")
plotc <- plot(gissuenet,
vertex.color = '#2a00fa',
vertex.size = 7,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1,
edge.width=edge.betweenness(gissuenet)/10,
layout=layout.random,
main="random")
plotd <- plot(gissuenet,
vertex.color = '#2a00fa',
vertex.size = 7,
vertex.label = "",
edge.color = 'black',
edge.arrow.size = 0.02,
edge.curved = 0.1,
edge.width=edge.betweenness(gissuenet)/10,
layout=layout.fruchterman.reingold,
main="fruchterman.reingold")
blogdown::serve_site()
#install statnet suite
#install.packages('network', dependencies = T)
#install.packages('statnet', dependencies = T)
library(statnet)
#You may need to update your statnet package if you haven't in a while, you can do so by doing " statnet::update_statnet() "
# Set working directory ---------------------------------------------------
library(network)
library(statnet)
# Read in .rds files from "1_Data_ActorForum.r" ---------------------------
af_network_full <- readRDS("af_network_full.rds")
af_network <- af_network_full
CollaborativeClosure <- readRDS("PartnersInForum.rds")
class(af_network) #Network object
#Check out summary(af_network) to learn about the structure of the data
#summary(af_network) #1035 total nodes (642 in the first mode), 1705 edges, several important variables, such as forum sponsorship and actor type.
# Set the control and seed for modeling -----------------------------------
cont <-
control.ergm(
MCMC.burnin = 50000,
MCMC.samplesize = 1000,
MCMC.interval = 1000,
seed = 123 #Always set a seed for reproducibility
)
m1 <- ergm(af_network_full ~
edges,
control = cont,
verbose = TRUE)
m1
blogdown::serve_site()
blogdown::serve_site()
#install statnet suite
#install.packages('network', dependencies = T)
#install.packages('statnet', dependencies = T)
library(statnet)
#You may need to update your statnet package if you haven't in a while, you can do so by doing " statnet::update_statnet() "
# Set working directory ---------------------------------------------------
library(network)
library(statnet)
# Read in .rds files from "1_Data_ActorForum.r" ---------------------------
af_network_full <- readRDS("af_network_full.rds")
af_network <- af_network_full
CollaborativeClosure <- readRDS("PartnersInForum.rds")
class(af_network) #Network object
#Check out summary(af_network) to learn about the structure of the data
#summary(af_network) #1035 total nodes (642 in the first mode), 1705 edges, several important variables, such as forum sponsorship and actor type.
# Set the control and seed for modeling -----------------------------------
cont <-
control.ergm(
MCMC.burnin = 50000,
MCMC.samplesize = 1000,
MCMC.interval = 1000,
seed = 123 #Always set a seed for reproducibility
)
m1 <- ergm(af_network_full ~
edges,
control = cont,
verbose = TRUE)
m1
m2 <- ergm(af_network_full ~
edges +
b1cov("actor_issues") +
b1factor("OrgType") +
b2cov("GovSponsored"),
control = cont,
verbose = TRUE)
m2
m3 <- ergm(af_network_full ~
edges +
b1cov("actor_issues") +
b1factor("OrgType") +
b2cov("GovSponsored") +
gwb1degree(.4, T),
control = cont,
verbose = TRUE)
m3
gofm2 <- gof(m2)
library(texreg)
#Output for m1
screenreg(list(m1), single.row = T)
#Output for multiple models
screenreg(list(m1, m2, m3), single.row = T)
# Or, use htmlreg() to create a .html file with this output!
# htmlreg(list(m1, m2, m3), single.row = T)
blogdown::serve_site()
blogdown:::new_post_addin()
library(statnet)
library(igraph)
N = 20
network(N, directed = F, density = 0)
g = network(N, directed = F, density = 0)
N = 20
g = network(N, directed = F, density = 0)
g %v% 'group' = sample(1:3, size = N, replace = T)
h
g
simulate(g ~ edges + nodematch('group'),  coef = c(-3,1))
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-3,1))
sim_g
plot(sim_g)
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-3,2))
plot(sim_g)
N = 40
g = network(N, directed = F, density = 0)
g %v% 'group' = sample(1:3, size = N, replace = T)
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-3,2))
plot(sim_g)
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-3,3))
plot(sim_g)
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-4,3))
plot(sim_g)
gplot(sim_g, vertex.col = g %v% 'group')
plot(sim_g, vertex.col = g %v% 'group')
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
library(igraph)
library(statnet)
N = 40
groups = 3
g = network(N, directed = F, density = 0)
g %v% 'group' = sample(1:groups, size = N, replace = T)
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-4,3))
plot(sim_g, vertex.col = g %v% 'group')
set.seed(777)
N = 40
groups = 3
g = network(N, directed = F, density = 0)
g %v% 'group' = sample(1:groups, size = N, replace = T)
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(-4,3))
plot(sim_g, vertex.col = g %v% 'group')
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
groups = 3    # number of groups
ed = -4       # edge density (log-odds)
h  = 3        # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:groups, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
groups = 3    # number of groups
ed = -4       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:groups, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
groups = 3    # number of groups
ed = -4       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:groups, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
groups = 3    # number of groups
ed = -4       # edge density (log-odds)
h  =  3       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:groups, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
?cluster_walktrap
# convert network to igraph
as.igraph(sim_g)
# convert network to igraph
as.network(sim_g)
# convert network to igraph
g = as.igraph(sim_g)
# convert network to igraph
ig = intergraph::asIgraph(sim_g)
clust_wt = cluster_walktrap(ig)
?cluster_edge_betweenness
clust_eb = cluster_edge_betweenness(ig)
?cluster_louvain
clust_lv = cluster_louvain(ig)
cluster_leiden(ig)
clust_ld = cluster_leiden(ig)
?cluster_leiden
library(igraph)
library(statnet)
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
G  =  3       # number of groups
ed = -4       # edge density (log-odds)
h  =  3       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:G, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# convert network to igraph
ig = intergraph::asIgraph(sim_g)
clust_wt = cluster_walktrap(ig)
clust_eb = cluster_edge_betweenness(ig)
compare(clust_wt, v(ig)$group, method = 'nmi')
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
clust_wt
plot(clust_eb)
plot(clust_eb, ig)
plot(clust_lv, ig)
plot(clust_wt, ig)
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
G  =  3       # number of groups
ed = -4       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:G, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
G  =  3       # number of groups
ed = -3       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:G, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# convert network to igraph
ig = intergraph::asIgraph(sim_g)
clust_wt = cluster_walktrap(ig)
clust_eb = cluster_edge_betweenness(ig)
clust_lv = cluster_louvain(ig)
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
plot(clust_wt, ig)
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_wt, clust_eb)
compare(clust_wt, clust_lv)
compare(clust_eb, clust_lv)
plot(ig, vertex.color = V(ig)$group)
plot(ig, vertex.color = V(ig)$group, layout=layout_with_kk)
par(c(mfrow(2,2)))
par(mfrow=c(2,1))
plot(ig, vertex.color = V(ig)$group, layout=layout_with_kk)
plot(clust_wt, ig, layout=layout_with_kk)
plot(clust_eb, ig, layout=layout_with_kk)
plot(clust_lv, ig, layout=layout_with_kk)
par(mfrow=c(2,1))
plot(ig, vertex.color = V(ig)$group, layout=layout_with_kk)
plot(clust_wt, ig, layout=layout_with_kk)
plot(clust_eb, ig, layout=layout_with_kk)
plot(clust_lv, ig, layout=layout_with_kk)
par(mfrow=c(2,2))
plot(ig, vertex.color = V(ig)$group, layout=layout_with_kk)
plot(clust_wt, ig, layout=layout_with_kk)
plot(clust_eb, ig, layout=layout_with_kk)
plot(clust_lv, ig, layout=layout_with_kk)
plot(ig,
vertex.color = V(ig)$group,
layout=layout_with_kk,
main='Original')
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(ig,
vertex.color = V(ig)$group,
layout=layout_with_kk,
main='Original')
plot(clust_wt, ig, layout=layout_with_kk, main='Walktrap')
plot(clust_eb, ig, layout=layout_with_kk, main='Edge betweenness')
plot(clust_lv, ig, layout=layout_with_kk, main='Louvain')
clust_lv$membership
mem_lv = clust_lv$membership
mem_lv = clust_lv$membership
V(ig)$mem_lv = mem_lv
plot(ig,
vertex.color = V(ig)$mem_lv,
layout=layout_with_kk,
main='Louvain memberships')
clust_lv$memberships
clust_lv$modularity
par(mfrow=c(1,1))
mem_lv = clust_lv$membership
V(ig)$mem_lv = mem_lv
plot(ig,
vertex.color = V(ig)$mem_lv,
layout=layout_with_kk,
main='Louvain memberships')
