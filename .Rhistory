N <- 7
# How many edges?
N_edges <- N^2
# Use binomial distribution to simulate edges (coin flip)
simM <- matrix(rbinom(N_edges,
size=1,
prob=0.5),
nrow = N)
# No loops
diag(simM) <- 0
simM
set.seed(777)
N <- letters[1:5]
simE <- expand.grid(N,N)
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2]
head(simE)
library(igraph)
att <- data.frame(
name = c("i","j","k"),
size = c(20,27,34),
color = c('tomato',
'cornflowerblue',
'darkorchid')
)
att
gM <- graph.adjacency(M)
gM
set_vertex_attr(gM, name = 'size', value = att$size)
set_vertex_attr(gM, name = 'color', value = att$color)
gM
v <- letters[9:11]
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
kableExtra::kbl(M, align = 'c')
v <- letters[9:11]
v
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
M
M[1,2] <- 1
M[1,3] <- 1
M
M[3,1] <- 1
M
M[2,2] <- 1
M
diag(M) <- 0
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
colnames(E) <- c('Sender','Receiver')
kableExtra::kbl(E)
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
E <- rbind(E, c('i','j'))
E
E[-4,]
set.seed(777)
# How many nodes?
N <- 7
# How many edges?
N_edges <- N^2
# Use binomial distribution to simulate edges (coin flip)
simM <- matrix(rbinom(N_edges,
size=1,
prob=0.5),
nrow = N)
# No loops
diag(simM) <- 0
simM
set.seed(777)
N <- letters[1:5]
simE <- expand.grid(N,N)
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2]
head(simE)
library(igraph)
att <- data.frame(
name = c("i","j","k"),
size = c(20,27,34),
color = c('tomato',
'cornflowerblue',
'darkorchid')
)
att
gM <- graph.adjacency(M)
gM
gM <- set_vertex_attr(gM, name = 'size', value = att$size)
gM <- set_vertex_attr(gM, name = 'color', value = att$color)
gM
gM <- set_vertex_attr(gM, name = 'size', value = att$size)
gM <- set_vertex_attr(gM, name = 'color', value = att$color)
gM
gE <- graph.data.frame(E, vertices = att)
gE <- graph.data.frame(E, vertices = att)
gE
V(gE)$color
netM <- network(M, vertices = att)
install.packages('statnet', dependencies=T)
library(statnet)
netM <- network(M, vertices = att)
netM <- network(M, vertex.attr = att)
netE <- network(E, vertex.attr = att, matrix.type = "edgelist" )
netM <- network(M, vertex.attr = att)
netE <- network(E, vertex.attr = att, matrix.type = "edgelist" )
netE
blogdown:::preview_site(startup = TRUE)
?plot.network
??plot.network
?plot.igraph
??plot.igraph
??igraph.plotting
plot(gE)
plot(gE)
v <- letters[9:11]
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
kableExtra::kbl(M, align = 'c')
v <- letters[9:11]
v
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
M
M[1,2] <- 1
M[1,3] <- 1
M
M[3,1] <- 1
M
M[2,2] <- 1
M
diag(M) <- 0
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
colnames(E) <- c('Sender','Receiver')
kableExtra::kbl(E)
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
E <- rbind(E, c('i','j'))
E
E[-4,]
set.seed(777)
# How many nodes?
N <- 7
# How many edges?
N_edges <- N^2
# Use binomial distribution to simulate edges (coin flip)
simM <- matrix(rbinom(N_edges,
size=1,
prob=0.5),
nrow = N)
# No loops
diag(simM) <- 0
simM
set.seed(777)
N <- letters[1:5]
simE <- expand.grid(N,N)
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2]
head(simE)
library(igraph)
att <- data.frame(
name = c("i","j","k"),
size = c(20,27,34),
color = c('tomato',
'cornflowerblue',
'darkorchid')
)
att
gM <- graph.adjacency(M)
gM
gM <- set_vertex_attr(gM, name = 'size', value = att$size)
gM <- set_vertex_attr(gM, name = 'color', value = att$color)
gM
gE <- graph.data.frame(E, vertices = att)
gE
V(gE)$color
plot(gE)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681,
edge.curved = 0.9,
layout = layout.circle)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681,
edge.curved = 0.1,
layout = layout.circle)
?zach
??zach
zach
data(zach)
?gplot
??gplot
v <- letters[9:11]
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
kableExtra::kbl(M, align = 'c')
v <- letters[9:11]
v
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
M
M[1,2] <- 1
M[1,3] <- 1
M
M[3,1] <- 1
M
M[2,2] <- 1
M
diag(M) <- 0
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
colnames(E) <- c('Sender','Receiver')
kableExtra::kbl(E)
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
E <- rbind(E, c('i','j'))
E
E[-4,]
set.seed(777)
# How many nodes?
N <- 7
# How many edges?
N_edges <- N^2
# Use binomial distribution to simulate edges (coin flip)
simM <- matrix(rbinom(N_edges,
size=1,
prob=0.5),
nrow = N)
# No loops
diag(simM) <- 0
simM
set.seed(777)
N <- letters[1:5]
simE <- expand.grid(N,N)
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2]
head(simE)
library(igraph)
att <- data.frame(
name = c("i","j","k"),
size = c(20,27,34),
color = c('tomato',
'cornflowerblue',
'darkorchid')
)
att
gM <- graph.adjacency(M)
gM
gM <- set_vertex_attr(gM, name = 'size', value = att$size)
gM <- set_vertex_attr(gM, name = 'color', value = att$color)
gM
gE <- graph.data.frame(E, vertices = att)
gE
V(gE)$color
plot(gE)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681,
edge.curved = 0.1,
layout = layout.circle)
library(statnet)
netM <- network(M, vertex.attr = att)
netE <- network(E, vertex.attr = att,
matrix.type = "edgelist" )
netE
data(zach)
zach
gplot(zach, usearrows = F)
v <- letters[9:11]
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
kableExtra::kbl(M, align = 'c')
v <- letters[9:11]
v
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
M
M[1,2] <- 1
M[1,3] <- 1
M
M[3,1] <- 1
M
M[2,2] <- 1
M
diag(M) <- 0
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
colnames(E) <- c('Sender','Receiver')
kableExtra::kbl(E)
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
E <- rbind(E, c('i','j'))
E
E[-4,]
set.seed(777)
# How many nodes?
N <- 7
# How many edges?
N_edges <- N^2
# Use binomial distribution to simulate edges (coin flip)
simM <- matrix(rbinom(N_edges,
size=1,
prob=0.5),
nrow = N)
# No loops
diag(simM) <- 0
simM
set.seed(777)
N <- letters[1:5]
simE <- expand.grid(N,N)
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2]
head(simE)
library(igraph)
att <- data.frame(
name = c("i","j","k"),
size = c(20,27,34),
color = c('tomato',
'cornflowerblue',
'darkorchid')
)
att
gM <- graph.adjacency(M)
gM
gM <- set_vertex_attr(gM, name = 'size', value = att$size)
gM <- set_vertex_attr(gM, name = 'color', value = att$color)
gM
gE <- graph.data.frame(E, vertices = att)
gE
V(gE)$color
plot(gE)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681)
plot(gE,
vertex.color = '#2a00fa',
vertex.size = 30,
vertex.label.color = 'white',
edge.color = 'black',
edge.arrow.size = 0.681,
edge.curved = 0.1,
layout = layout.circle)
library(statnet)
netM <- network(M, vertex.attr = att)
netE <- network(E, vertex.attr = att,
matrix.type = "edgelist" )
netE
netE %v% 'color'
data(zach)
zach
par(mar=c(0,0,0,0)) # make margins smaller
gplot(zach, usearrows = F)
# set gmode to 'graph' for undirected graphs
set.vertex.attribute(zach,
attrname = 'degree',
value = degree(z, gmode = 'graph'))
# set gmode to 'graph' for undirected graphs
set.vertex.attribute(zach,
attrname = 'degree',
value = degree(zach, gmode = 'graph'))
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown:::preview_site(startup = TRUE)
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(igraph)
library(intergraph)
library(statnet)
library(tidygraph)
library(ggraph)
sas_theme <- theme(
panel.background = element_rect(fill='white', color = 'black'),
panel.grid = element_line(color='gray85', linetype = 3),
text = element_text(family = 'mono'),
strip.background = element_rect(fill = '#3c540033'),
strip.text = element_text(color = '#3c5400')
)
pal <- c("#3300ff","#3300ff33")
set.seed(777)                      # reproducibility
N <- 20                            # N vertices
net1 <- network(N, directed = T, density = 0)    # edge density
net1
# some colors
cols <- c('purple','green')
# sample from `col` and assign to net1
net1 %v% 'vcolor' <- sample(cols, size = N, replace = T)
net1 %v% 'vcolor'
logit2prob <- function(coef) {
odds <- exp(coef)
prob <- odds / (1 + odds)
return(prob)
}
logit2prob(0)
# model formula
form1 <- net1 ~ edges + mutual + nodematch('vcolor')
# coefficients must be same order and length as terms to the right of ~
coefs <- c(-4,0,1)
logit2prob(2)
# model formula
form1 <- net1 ~ edges + mutual + nodematch('vcolor')
# coefficients must be same order and length as terms to the right of ~
coefs <- c(-4,0,1)
logit2prob(1)
# model formula
form1 <- net1 ~ edges + mutual + nodematch('vcolor')
# coefficients must be same order and length as terms to the right of ~
coefs <- c(-4,0,1)
logit2prob(-4)
knitr::include_graphics("C:/Users/scagg/Documents/Shane's Projects/Flock-Party_Eric-Losh.jpg")
# initialization
N_birds <- 30
N_sp <- 5        # how many species?
flock <- network(N_birds, directed = F, density = 0)
# initialization
N_birds <- 30
N_sp <- 5        # how many species?
flock <- network(N_birds, directed = F, density = 0)
# density
qlogis(-4)       # ~0.02
# density
qlogis(0.2)       # ~0.02
# density
qlogis(0.02)       # ~0.02
knitr::include_graphics("~static/images/Flock-Party_Eric-Losh.jpg")
knitr::include_graphics("~/static/images/Flock-Party_Eric-Losh.jpg")
blogdown:::insert_image_addin()
![](images/Flock-Party_Eric-Losh.jpg){width=70% height=70%}
Artwork by [Eric Losh](http://www.elosh.com/illustration/)
install.packages("gitcreds")
library(gitcreds)
gitcreds_set()
blogdown::serve_site()
