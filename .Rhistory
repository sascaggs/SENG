breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=1.1) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.7) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=1) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color='')
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.8,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
setwd("~/Shane's Projects/Networks/SENG/SENG Website/seng/content/post/2021-12-20-best-practices-for-visualizing-networks")
# Directed and undirected graphs ------------------------------------------
N <- 100
un100 <- network(N, directed = F, density = 0.01)
dn100 <- network(N, directed = T, density = 0.01)
plot(un100)
plot(dn100)
# Directed and undirected graphs ------------------------------------------
N <- 1000
un100 <- network(N, directed = F, density = 0.01)
dn100 <- network(N, directed = T, density = 0.01)
plot(un100)
plot(dn100)
# Sparse graphs are characterized
component.dist(un100)
# Directed and undirected graphs ------------------------------------------
N <- 100
un100 <- network(N, directed = F, density = 0.01)
dn100 <- network(N, directed = T, density = 0.01)
# Sparse graphs are characterized
component.dist(un100)
component.dist(di100)
component.dist(dn100)
N <- 100
un100 <- network(N, directed = F, density = 0.01)
dn100 <- network(N, directed = T, density = 0.01)
plot(un100)
plot(dn100)
# Sparse graphs are characterized
component.dist(un100)
component.dist(dn100)
plot(dn100)
# Sparse graphs are characterized
component.dist(un100)
component.dist(dn100, connected = 'strong')
component.dist(dn100, connected = 'weak')
# Sparse graphs are characterized
component.dist(un100, connected = 'weak')
component.dist(dn100, connected = 'weak')
# Sparse graphs are characterized
component.dist(un100, connected = 'weak')$csize
# Sparse graphs are characterized
component.dist(un100, connected = 'weak')$csize
component.dist(dn100, connected = 'weak')$csize
# Sparse graphs are characterized
Nseq <- seq(100,300, by=10)
Nseq
un100 <- network(300, directed = F, density = 0.01)
plot(un100)
dn100 <- network(300, directed = T, density = 0.01)
plot(dn100)
Nseq <- seq(100,300, by=10)
un100 <- network(300, directed = F, density = 0.01)
dn100 <- network(300, directed = T, density = 0.01)
plot(un100)
plot(dn100)
component.dist(un100, connected = 'weak')$csize
component.dist(dn100, connected = 'weak')$csize
component.dist(un100, connected = 'weak')$csize
component.dist(dn100, connected = 'weak')$csize
un100 <- network(Nseq, directed = F, density = 0.01)
sapply(Nseq, network, directed = F, density = 0.01)
sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
unnets <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
unnets <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
dinets <- sapply(Nseq, network, directed = T, density = 0.01, simplify = F)
component.size.byvertex(un100)
component.size.byvertex(dn100)
length(unique(component.size.byvertex(dn100))
)
length(unique(component.size.byvertex(dn100)))
length(unique(component.size.byvertex(un100)))
lapply(unnets, component.size.byvertex, connected = 'weak')
length(lapply(unnets, component.size.byvertex, connected = 'weak'))
lapply(
lapply(
lapply(unnets, component.size.byvertex, connected = 'weak'), unique), length)
compcurve <- function(Nseq){
L <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
C <- lapply( lapply( lapply(unnets, component.size.byvertex, connected = 'weak'), unique), length)
return(C)
}
compcurve(Nseq)
return(bind_rows(C))
compcurve <- function(Nseq){
L <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
C <- lapply( lapply( lapply(unnets, component.size.byvertex, connected = 'weak'), unique), length)
return(bind_rows(C))
}
compcurve(Nseq)
compcurve <- function(Nseq){
L <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
C <- lapply( lapply( lapply(unnets, component.size.byvertex, connected = 'weak'), unique), length)
return(unlist(C))
}
compcurve(Nseq)
# Sparse graphs are characterized
Nseq <- seq(10,500, by=1)
compcurve <- function(Nseq){
L <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
C <- lapply( lapply( lapply(unnets, component.size.byvertex, connected = 'weak'), unique), length)
return(unlist(C))
}
compcurve(Nseq)
compcurve <- function(Nseq){
uL <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = 0.01, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(cbind(unlist(uC), unlist(dC)))
}
# Sparse graphs are characterized
Nseq <- seq(10,500, by=10)
compcurve <- function(Nseq){
uL <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = 0.01, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(cbind(unlist(uC), unlist(dC)))
}
compcurve(Nseq)
# Sparse graphs are characterized
Nseq <- seq(100,1000, by=40)
compcurve <- function(Nseq){
uL <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = 0.01, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(cbind(unlist(uC), unlist(dC)))
}
compcurve(Nseq)
# Sparse graphs are characterized
Nseq <- seq(100,1000, by=20)
compcurve <- function(Nseq){
uL <- sapply(Nseq, network, directed = F, density = 0.01, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = 0.01, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(cbind(unlist(uC), unlist(dC)))
}
compcurve(Nseq)
# Sparse graphs are characterized
Nseq <- seq(100,1000, by=20)
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(cbind(unlist(uC), unlist(dC)))
}
tibble(compcurve(Nseq))
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC)))
}
tibble(compcurve(Nseq))
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC),
Nseq))
}
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq)
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))
Nseq <- seq(10,1000, by=20)
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC),
Nseq))
}
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,1000,100)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,8,2)) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Number of components', color=NULL)
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))  +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,1000,100)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,8,2)) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Number of components', color=NULL)
tibble(compcurve(Nseq))
# Sparse graphs are characterized
Nseq <- seq(100,1000, by=10)
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC),
Nseq))
}
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))  +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,1000,100)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,8,2)) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Number of components', color=NULL)
# Sparse graphs are characterized
set.seed(777)
Nseq <- seq(100,1000, by=10)
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC),
Nseq))
}
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))  +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,1000,100)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,8,2)) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Number of components', color=NULL)
Nseq <- seq(1,10000, by=99)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Orthogonal group density', color=NULL)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Edge density', color=NULL, title = 'Graph density when number of edges = O(n).')
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Edge density', color=NULL, title = 'Graph density when E = O(n).')
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Density', color=NULL, title = 'Graph density when E = O(n).')
set.seed(777)
Nseq <- seq(100,1000, by=10)
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC),
Nseq))
}
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))  +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,1000,100)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,10,2)) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Number of vertices', y='Number of components', color=NULL)
Nseq <- seq(1,10000, by=99)
tibble(di = didens(Nseq), un = undens(Nseq), Nseq) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,10000,1000)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,0.02,0.002)) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white')) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Vertices', y='Density', color=NULL)
# Sparse graphs can be characterized by a greater number of components and isolates. But as the number vertices in a graph increases, the number of components in a graph diminishes, even for sparse graphs. For an graph larger than 1000 vertices, a visual inspection is not sufficient to determine whether it is sparse.
set.seed(777)
Nseq <- seq(100,1000, by=10)
compcurve <- function(Nseq, D=0.01){
uL <- sapply(Nseq, network, directed = F, density = D, simplify = F)
uC <- lapply( lapply( lapply(uL, component.size.byvertex, connected = 'weak'), unique), length)
dL <- sapply(Nseq, network, directed = T, density = D, simplify = F)
dC <- lapply( lapply( lapply(dL, component.size.byvertex, connected = 'weak'), unique), length)
return(data.frame(undirected = unlist(uC),
directed = unlist(dC),
Nseq))
}
tibble(compcurve(Nseq)) %>%
gather(key=key, value=value, -Nseq) %>%
ggplot(aes(x=Nseq)) +
prickles +
geom_line(aes(y=value, color=key), lwd=0.8) +
theme(legend.position = c(0.7,0.8),
legend.box.background = element_rect(fill='white'),
legend.key = element_rect(fill='white'))  +
scale_x_continuous(guide = 'prism_minor',
breaks = seq(0,1000,100)) +
scale_y_continuous(guide = 'prism_minor',
breaks = seq(0,10,2)) +
scale_color_manual(values = c('#3300ff','magenta'), labels = c('directed','undirected')) +
labs(x='Vertices', y='Components', color=NULL)
