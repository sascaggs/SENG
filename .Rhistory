n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:length(r), n_communties, type='o')
r = seq(0.001,1, length=200)
l = list()
for(i in 1:length(r)) {
c = cluster_leiden(ig, resolution_parameter = r[i])
l[[i]] = c$membership
}
n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:length(r), n_communties, type='o')
plot(1:length(r), n_communties, type='o')
abline(a=3,b=0)
plot(1:length(r), n_communties, type='o')
abline(a=3,b=0)
r = seq(0.001,1, length=200)
l = list()
for(i in 1:length(r)) {
c = cluster_leiden(ig, resolution_parameter = r[i])
l[[i]] = c$membership
}
n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:length(r), n_communties, type='o')
abline(a=3,b=0, lty=2)
blogdown::serve_site()
library(igraph)
library(statnet)
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
G  =  3       # number of groups
ed = -3       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:G, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# convert network to igraph
ig = intergraph::asIgraph(sim_g)
clust_wt = cluster_walktrap(ig, steps = 4) # 4 is default
clust_eb = cluster_edge_betweenness(ig)
clust_lv = cluster_louvain(ig, resolution = 0.5)
clust_ld = cluster_leiden(ig, resolution_parameter = 0.05)
# nmi = normalized mutual information, a conditional entropy calculation
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_ld, V(ig)$group, method = 'nmi')
compare(clust_wt, clust_eb)
compare(clust_wt, clust_lv)
compare(clust_wt, clust_ld)
compare(clust_eb, clust_lv)
compare(clust_eb, clust_ld)
compare(clust_lv, clust_ld)
library(igraph)
library(statnet)
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
G  =  3       # number of groups
ed = -3       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:G, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# convert network to igraph
ig = intergraph::asIgraph(sim_g)
clust_wt = cluster_walktrap(ig, steps = 4) # 4 is default
clust_eb = cluster_edge_betweenness(ig)
clust_lv = cluster_louvain(ig, resolution = 0.5)
clust_ld = cluster_leiden(ig, resolution_parameter = 0.05)
# nmi = normalized mutual information, a conditional entropy calculation
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_ld, V(ig)$group, method = 'nmi')
compare(clust_wt, clust_eb)
compare(clust_wt, clust_lv)
compare(clust_wt, clust_ld)
compare(clust_eb, clust_lv)
compare(clust_eb, clust_ld)
compare(clust_lv, clust_ld)
# 100 steps
steps = 100
l = list()
for(i in 1:steps) {
c = cluster_walktrap(ig, steps = i)
l[[i]] = c$membership
}
n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:steps, n_communties, type='o')
r = seq(0.001,1, length=200)
l = list()
for(i in 1:length(r)) {
c = cluster_leiden(ig, resolution_parameter = r[i])
l[[i]] = c$membership
}
n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:length(r), n_communties, type='o')
abline(a=3,b=0, lty=2)
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(ig,
vertex.color = V(ig)$group,
layout=layout_with_kk,
main='Original')
plot(clust_wt, ig, layout=layout_with_kk, main='Walktrap')
plot(clust_eb, ig, layout=layout_with_kk, main='Edge betweenness')
plot(clust_lv, ig, layout=layout_with_kk, main='Louvain')
par(mfrow=c(2,3), mar=c(1,1,1,1))
par(mfrow=c(2,3), mar=c(1,1,1,1))
plot(ig,
vertex.color = V(ig)$group,
layout=layout_with_kk,
main='Original')
plot(clust_wt, ig, layout=layout_with_kk, main='Walktrap')
plot(clust_eb, ig, layout=layout_with_kk, main='Edge betweenness')
plot(clust_lv, ig, layout=layout_with_kk, main='Louvain')
plot(clust_ld, ig, layout=layout_with_kk, main='Leiden')
t(combn(1:3,2))
network(3, density=0, directed = F)
g0 = network(3, density=0, directed = F)
network(t(combn(1:3,2)))
g3 = network(t(combn(1:3,2)))
plot(network(3, density=0, directed = F))
gplot(network(3, density=0, directed = F))
gplot(network(t(combn(1:3,2))))
plot(network(t(combn(1:3,2))))
gplot(network(t(combn(1:3,2))), arrowhead.cex = 0)
el = t(combn(1:3,2))
gplot(network(el), arrowhead.cex = 0)
gplot(network(el)[1,], arrowhead.cex = 0)
network(rbind(c(1,2),
c(2,3),
c(3,4),
c(4,1)))
gplot(network(rbind(c(1,2),
c(2,3),
c(3,4),
c(4,1))))
gplot(network(rbind(c(1,2),
c(2,3),
c(3,4),
c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(1(combn(1:4,2)), arrowhead.cex = 0)
gplot(network(1(combn(1:4,2)), arrowhead.cex = 0)
gplot(network(t(combn(1:4,2)), arrowhead.cex = 0)
)
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(1,3),c(1,4)), arrowhead.cex = 0)
)
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(1,3),c(1,4)), arrowhead.cex = 0))
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(1,3),c(1,4))), arrowhead.cex = 0)
par(mfrow=c(2,1))
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(1,3),c(1,4))), arrowhead.cex = 0)
par(mfrow=c(2,1))
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(1,3),c(1,4))), arrowhead.cex = 0)
par(mfrow=c(1,2), mar=c(1,1,1,1))
gplot(network(rbind(c(1,2),c(2,3),c(3,4),c(4,1))), arrowhead.cex = 0)
gplot(network(rbind(c(1,2),c(1,3),c(1,4))), arrowhead.cex = 0)
ig
?subgraph_isomorphic
make_graph(~1:2:3:4)
rbind(c(1,2),c(2,3),c(3,4),c(4,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
star = rbind(c(1,2),c(1,3),c(1,4))
cyc = graph.data.frame(rbind(c(1,2),c(2,3),c(3,4),c(4,1)))
star = graph.data.frame(rbind(c(1,2),c(1,3),c(1,4)))
cyc
plot(cyc)
subgraph_isomorphic(cyc, ig)
cyc = graph.data.frame(rbind(c(1,2),c(2,3),c(3,4),c(4,1)), directed = F)
star = graph.data.frame(rbind(c(1,2),c(1,3),c(1,4)), directed = F)
subgraph_isomorphic(cyc, ig)
subgraph_isomorphisms(cyc, ig)
subgraph_isomorphic(list(cyc,star), ig)
subgraph_isomorphic(star, ig)
subgraph_isomorphic(cyc, ig)
subgraph_isomorphic(star, ig)
subgraph_isomorphisms(star, ig)
par(mfrow=c(1,2), mar=c(1,1,1,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
star = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
gplot(network(cyc), arrowhead.cex = 0)
gplot(network(star), arrowhead.cex = 0)
par(mfrow=c(1,2), mar=c(1,1,1,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
star = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
gplot(network(cyc), arrowhead.cex = 0)
gplot(network(star), arrowhead.cex = 0)
star = rbind(c(1,2),c(1,3),c(1,4))
par(mfrow=c(1,2), mar=c(1,1,1,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
star = rbind(c(1,2),c(1,3),c(1,4))
gplot(network(cyc), arrowhead.cex = 0)
gplot(network(star), arrowhead.cex = 0)
gplot(network(cyc, directed = F))
par(mfrow=c(1,2), mar=c(1,1,1,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
cyc = network(cyc, directed = F)
star = rbind(c(1,2),c(1,3),c(1,4))
star = network(star, directed = F)
gplot(cyc)
gplot(sar, arrowhead.cex = 0)
par(mfrow=c(1,2), mar=c(1,1,1,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
cyc = network(cyc, directed = F)
star = rbind(c(1,2),c(1,3),c(1,4))
star = network(star, directed = F)
gplot(cyc)
gplot(star, arrowhead.cex = 0)
par(mfrow=c(1,2), mar=c(1,1,1,1))
cyc = rbind(c(1,2),c(2,3),c(3,4),c(4,1))
cyc = network(cyc, directed = F)
star = rbind(c(1,2),c(1,3),c(1,4))
star = network(star, directed = F)
gplot(cyc, arrowhead.cex = 0)
gplot(star, arrowhead.cex = 0)
centralization(cyc)
centralization(cyc, degree)
centralization(star, degree)
hierarchy(cyc)
hierarchy(star)
centralization(cyc, degree)
centralization(star, degree)
hierarchy(cyc, measure = 'krackhardt')
hierarchy(star, measure = 'krackhardt')
centralization(cyc, degree)
centralization(star, degree)
library(intergraph)
average.path.length(asIgraph(cyc))
average.path.length(asIgraph(star))
is.igraph(cyc)
is.igraph(cyc)
is.igraph(star)
cyc.ig = asIgraph(cyc)
star.ig = asIgraph(star)
subgraph_isomorphic(cyc.ig, ig)
subgraph_isomorphic(star.ig)
subgraph_isomorphic(star.ig, ig)
cyc.iso = subgraph_isomorphisms(cyc.ig, ig)
star.iso = subgraph_isomorphism(star.ig, ig)
star.iso = subgraph_isomorphisms(star.ig, ig)
class(cyc.iso)
dim(cyc.iso)
length(cyc.iso)
length(star.iso)
head(cyc.iso)
head(cyc.iso)
head(star.iso)
pa = barabasi.game(7, power = 1)
pa = barabasi.game(7, power = 1)
plot(pa)
set.seed(777)
pa = barabasi.game(8, power = 1)
plot(pa)
set.seed(777)
pa = barabasi.game(6, power = 1)
plot(pa)
set.seed(777)
pa = barabasi.game(6, power = 2)
plot(pa)
set.seed(777)
pa = barabasi.game(7, power = 1)
plot(pa)
V(ig)$group
V(ig)$group == 1
ig
V(ig)$vertex.names[V(ig)$group == 1]
group1 = V(ig)$vertex.names[V(ig)$group == 1]
group2 = V(ig)$vertex.names[V(ig)$group == 2]
group3 = V(ig)$vertex.names[V(ig)$group == 3]
V(ig)$vertex.names %in% group1
group1 = V(ig)$vertex.names[V(ig)$group == 1]
group2 = V(ig)$vertex.names[V(ig)$group == 2]
group3 = V(ig)$vertex.names[V(ig)$group == 3]
domains = list(`1` = group1,
`2` = group2,
`3` = group3)
test = subgraph_isomorphisms(pattern = pa,
target = ig,
domains = domains)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 1)
pa2 = barabasi.game(length(group2), power = 1)
pa3 = barabasi.game(length(group3), power = 1)
plot(pa1)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 1)
pa2 = barabasi.game(length(group2), power = 1)
pa3 = barabasi.game(length(group3), power = 1)
par(mfrow=c(3,1), mar=c(1,1,1,1))
plot(pa1)
plot(pa2)
plot(pa3)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 1)
pa2 = barabasi.game(length(group2), power = 1)
pa3 = barabasi.game(length(group3), power = 1)
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(pa1)
plot(pa2)
plot(pa3)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 2)
pa2 = barabasi.game(length(group2), power = 1)
pa3 = barabasi.game(length(group3), power = 1)
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(pa1)
plot(pa2)
plot(pa3)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 2)
pa2 = barabasi.game(length(group2), power = 2)
pa3 = barabasi.game(length(group3), power = 2)
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(pa1)
plot(pa2)
plot(pa3)
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = domains)
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = domains[[1]])
domains[[1]]
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = domains[[1]])
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = as.numeric(domains[[1]]))
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = domains)
iso1 = subgraph_isomorphisms(pattern = pa2,
target = ig,
domains = domains)
domains
pa1 = barabasi.game(length(group1), power = 2, directed = F)
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = domains)
pa1 = barabasi.game(length(group1), power = 2, directed = F)
iso1 = subgraph_isomorphisms(pattern = pa1,
target = ig,
domains = domains)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 2, directed = F)
pa2 = barabasi.game(length(group2), power = 2)
pa3 = barabasi.game(length(group3), power = 2)
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(pa1)
plot(pa2)
plot(pa3)
set.seed(777)
pa1 = barabasi.game(length(group1), power = 2, directed = F)
pa2 = barabasi.game(length(group2), power = 2, directed = F)
pa3 = barabasi.game(length(group3), power = 2, directed = F)
par(mfrow=c(1,3), mar=c(1,1,1,1))
plot(pa1)
plot(pa2)
plot(pa3)
cyc.iso = subgraph_isomorphisms(cyc.ig, ig, induced = T)
cyc.iso = subgraph_isomorphisms(cyc.ig, ig, induced = T)
star.iso = subgraph_isomorphisms(star.ig, ig, induced = T)
cyc.iso = subgraph_isomorphisms(cyc.ig, ig, induced = T)
star.iso = subgraph_isomorphisms(star.ig, ig, induced = T)
par(mfrow=c(1,4), mar=c(1,1,1,1))
for(i in 1:4) { plot(cyc.iso[[i]]) }
cyc.iso[[1]]
plot(cyc.iso[[1]])
library(igraph)
library(intergraph)
library(statnet)
# set seed for reproducibility
set.seed(777)
# settings
N  = 40       # number of nodes
G  =  3       # number of groups
ed = -3       # edge density (log-odds)
h  =  2       # group homophily
# empty network
g = network(N, directed = F, density = 0)
# create group attribute
g %v% 'group' = sample(1:G, size = N, replace = T)
# simulate and plot netwok
sim_g = simulate(g ~ edges + nodematch('group'),  coef = c(ed,h))
plot(sim_g, vertex.col = g %v% 'group')
# convert network to igraph
ig = intergraph::asIgraph(sim_g)
clust_wt = cluster_walktrap(ig, steps = 4) # 4 is default
clust_eb = cluster_edge_betweenness(ig)
clust_lv = cluster_louvain(ig, resolution = 0.05)
clust_ld = cluster_leiden(ig, resolution_parameter = 0.05)
# nmi = normalized mutual information, a conditional entropy calculation
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_ld, V(ig)$group, method = 'nmi')
par(mfrow=c(2,3), mar=c(1,1,1,1))
plot(ig,
vertex.color = V(ig)$group,
layout=layout_with_kk,
main='Original')
plot(clust_wt, ig, layout=layout_with_kk, main='Walktrap')
plot(clust_eb, ig, layout=layout_with_kk, main='Edge betweenness')
plot(clust_lv, ig, layout=layout_with_kk, main='Louvain')
plot(clust_ld, ig, layout=layout_with_kk, main='Leiden')
clust_lv = cluster_louvain(ig, resolution = 0.15)
# nmi = normalized mutual information, a conditional entropy calculation
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_ld, V(ig)$group, method = 'nmi')
clust_lv = cluster_louvain(ig, resolution = 0.9)
# nmi = normalized mutual information, a conditional entropy calculation
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_ld, V(ig)$group, method = 'nmi')
r = seq(0.001,1, length=200)
l = list()
for(i in 1:length(r)) {
c = cluster_louvain(ig, resolution_parameter = r[i])
l[[i]] = c$membership
}
r = seq(0.001,1, length=200)
l = list()
for(i in 1:length(r)) {
c = cluster_louvain(ig, resolution  = r[i])
l[[i]] = c$membership
}
n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:length(r), n_communties, type='o')
abline(a=3,b=0, lty=2)
r = seq(0.001,1, length=500)
l = list()
for(i in 1:length(r)) {
c = cluster_louvain(ig, resolution  = r[i])
l[[i]] = c$membership
}
n_communties = unlist(lapply(lapply(l, unique), length))
plot(1:length(r), n_communties, type='o')
abline(a=3,b=0, lty=2)
clust_lv = cluster_louvain(ig, resolution = 0.55)
# nmi = normalized mutual information, a conditional entropy calculation
compare(clust_wt, V(ig)$group, method = 'nmi')
compare(clust_eb, V(ig)$group, method = 'nmi')
compare(clust_lv, V(ig)$group, method = 'nmi')
compare(clust_ld, V(ig)$group, method = 'nmi')
par(mfrow=c(2,3), mar=c(1,1,1,1))
plot(ig,
vertex.color = V(ig)$group,
layout=layout_with_kk,
main='Original')
plot(clust_wt, ig, layout=layout_with_kk, main='Walktrap')
plot(clust_eb, ig, layout=layout_with_kk, main='Edge betweenness')
plot(clust_lv, ig, layout=layout_with_kk, main='Louvain')
plot(clust_ld, ig, layout=layout_with_kk, main='Leiden')
blogdown:::new_post_addin()
blogdown::serve_site()
md <- data.frame(
Date = as.Date(c('2022-01-27',
'2022-02-10',
'2022-02-24',
'2022-03-10',
'2022-03-24',
'2022-04-14',
'2022-04-28')),
Topic = c('Temporal Random Graph Models',
'Informal Workshop I',
'Geographic Networks',
'Informal Workshop II',
'Bayesian Methods',
'Informal Workshop III',
'TBD')),
md <- data.frame(
Date = as.Date(c('2022-01-27',
'2022-02-10',
'2022-02-24',
'2022-03-10',
'2022-03-24',
'2022-04-14',
'2022-04-28')),
Topic = c('Temporal Random Graph Models',
'Informal Workshop I',
'Geographic Networks',
'Informal Workshop II',
'Bayesian Methods',
'Informal Workshop III',
'TBD'),)
library(tidyverse)
blogdown:::preview_site()
blogdown::build_site()
blogd
blogdown::build_site()
blogdown:::insert_image_addin()
blogdown::serve_site()
blogdown::build_site()
