k$t = t
l[[t]] = k
}
l
n = 4
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, 5, prob = 0.6))
expand.grid(e,f)
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, n-1, prob = p))
d = expand.grid(f,e)
return(d)
}
steps = 10
p = 0.3
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)+1
k$t = t
l[[t]] = k
}
l
n = 4
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, 5, prob = 0.6))
expand.grid(e,f)
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, n-1, prob = p))
d = expand.grid(f,e)
return(d)
}
steps = 10
p = 0.3
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)+1
k$t = t
l[[t]] = k
}
l
n = 4
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, 5, prob = 0.6))
expand.grid(e,f)
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, n-1, prob = p))
d = expand.grid(f,e)
return(d)
}
steps = 10
p = 0.3
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)+1
k$t = t
l[[t]] = k
}
l
samplegroup(4,1)
samplegroup(4,0.1)
samplegroup(4,0.2)
samplegroup(4,0.3)
samplegroup(4,0.5)
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
samplegroup(n, p)+1
n = 5
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)+1
k$t = t
l[[t]] = k
}
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, n-1, prob = p))
d = expand.grid(f,e)
return(d)
}
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
samplegroup(n=n,p=p)
rpois(10,1)
rbinom(1,n-1,prob=p)
rbinom(1,n-1,prob=p)
rbinom(1,n-1,prob=p)
rbinom(1,n-1,prob=p)
rbinom(1,n-1,prob=p)
rbinom(1,n-1,prob=p)
library(tidygraph)
library(ggraph)
library(tidyverse)
n = 4
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, 5, prob = 0.6))
expand.grid(e,f)
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], (rbinom(1, n-1, prob = p)+1))
d = expand.grid(f,e)
return(d)
}
steps = 10
p = 0.3
n = 5
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
library(tidygraph)
library(ggraph)
library(tidyverse)
n = 4
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, 5, prob = 0.6))
expand.grid(e,f)
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], (rbinom(1, n-1, prob = p)+1))
d = expand.grid(f,e)
return(d)
}
steps = 10
p = 0.3
n = 5
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
e = sample(1:n, 1)
e
n = 4
e = sample(1:n, 1)
f = sample((1:n)[-e], rbinom(1, 5, prob = 0.6))
expand.grid(e,f)
samplegroup = function(n,p) {
e = sample(1:n, 1)
f = sample((1:n)[-e], (rbinom(1, n-1, prob = p)+1))
d = expand.grid(f,e)
return(d)
}
steps = 10
p = 0.3
n = 5
l = list()
for(t in 1:steps) {
k = samplegroup(n, p)
k$t = t
l[[t]] = k
}
samplegroup(4,0.5)
l
el = bind_rows(l) %>%
group_by(Var1, Var2) %>%
mutate(weight = n())
el %>%
as_tbl_graph() %>%
activate(nodes) %>%
mutate(degree = centrality_degree()) %>%
ggraph('circle') +
#geom_edge_link(arrow = arrow(length = unit(1.68,'mm')),
#               end_cap = circle(2, 'mm')) +
geom_node_point(aes(color=name), size=10) +
geom_node_text(aes(label=name)) +
#facet_wrap(~t, nrow=2) +
theme(panel.background = element_rect(color='white', fill='white'),
plot.background  = element_rect(color='white', fill='white'),
strip.background = element_rect(color='black', fill='white'),
legend.position = 'none')
data('KosterLeckie', package = 'rethinking')
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown::serve_site()
blogdown:::new_post_addin()
blogdown::serve_site()
blogdown
blogdown::serve_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
data('KosterLeckie', package = 'rethinking')
library(statnet)
head(kl_dyads)
kl_dyads[, c('hidA','hidB','giftsAB')]
AB_dyads kl_dyads[, c('hidA','hidB','giftsAB')]
AB_dyads = kl_dyads[, c('hidA','hidB','giftsAB')]
kl_dyads[, c('hidB','hidB','giftsBA')]
kl_dyads[, c('hidB','hidA','giftsBA')]
BA_dyads = kl_dyads[, c('hidB','hidA','giftsBA')]
colnames(AB_dyads) = c('sender','receiver','gifts')
colnames(BA_dyads) = c('sender','receiver','gifts')
rbind(AB_dyads, BA_dyads)
colnames(AB_dyads) = c('sender','receiver','gifts')
colnames(BA_dyads) = c('sender','receiver','gifts')
el = rbind(AB_dyads, BA_dyads)
colnames(AB_dyads) = c('sender','receiver','gifts')
colnames(BA_dyads) = c('sender','receiver','gifts')
el = rbind(AB_dyads[ !AB_dyads$gifts == 0, ],
BA_dyads[ !BA_dyads$gifts == 0, ])
network(el)
network(el, vertex.attr = kl_households)
g = network(el, vertex.attr = kl_households)
g
plot(g, edge.lwd = g %e% 'gifts')
library(tidygraph)
library(tidygraph)
library(ggraph)
g %>% as_tbl_graph()
library(tidygraph)
library(ggraph)
g %>% as_tbl_graph() %>%
ggraph() +
geom_edge_link(aes(width=gifts))
plot(density(g %e% 'gifts'))
?ergm-terms
?`ergm-terms`
ergm(g ~ sum)
ergm(g ~ sum, response = 'gifts')
summary(g ~ sum, response = 'gifts')
summary(g ~ sum)
ergm(g ~ sum, response = 'gifts')
summary(g ~ sum, response = 'gifts')
sum(el$gifts)
rbinom(n=100, size=1, prob=0.5)
help("ergm-reference")
help("ergm-references")
rpois(n=100, lambda = 1)
plot(density(rpois(n=100, lambda = 1)))
g
library(tidygraph)
library(ggraph)
g %>% as_tbl_graph() %>%
ggraph() +
geom_edge_link(aes(width=gifts))
plot(hist(g %e% 'gifts'))
hist(g %e% 'gifts')
hist(g %e% 'gifts')
# binomial with same number of edges as network
rbinom(n=427, size=1, prob=0.5)
hist(rpois(n=427, lambda = 1))
hist(rpois(n=427, lambda = 5))
hist(rpois(n=427, lambda = 10))
ifelse(rbinom(n=427,size=1,prob=0.5) == 0, 0 ,
rpois(n=427, lambda=2))
hist( ifelse(rbinom(n=427,size=1,prob=0.5) == 0, 0 , rpois(n=427, lambda=2)))
hist( ifelse(rbinom(n=427,size=1,prob=0.5) == 0, 0 , rpois(n=427, lambda=2)),
main = '')
hist( ifelse(rbinom(n=427,size=1,prob=0.5) == 0, 0 , rpois(n=427, lambda=10)),
main = '')
max(el$gifts)
max(el$gifts)
hist(rbinom(n=427, size=max(el$gifts), prob = 0.05))
max(el$gifts)
hist(rbinom(n=427, size=max(el$gifts), prob = 0.1))
max(el$gifts)
hist(rbinom(n=427, size=max(el$gifts), prob = 0.01))
hist(rgeom(n=427, prob=0.5))
hist(rgeom(n=427, prob=0.1))
hist(rgeom(n=427, prob=0.9))
hist(rgeom(n=427, prob=0.1))
?rgeom
hist(rgeom(n=427, prob=1))
hist(rgeom(n=427, prob=0.9))
hist(rgeom(n=427, prob=0.1))
ergm(g ~ sum, response = 'gifts', reference = ~Geometric)
fit0 = ergm(g ~ sum, response = 'gifts', reference = ~Geometric)
summary(fit0)
form1.1 = 'g ~ sum + mutual(form="product")'
fit1.1 = ergm(form1.1, response = 'gifts', reference = ~Geometric)
form1.1 = 'g ~ sum + mutual(form="product")'
fit1.1 = ergm(do.call(form1.1), response = 'gifts', reference = ~Geometric)
fit1.1 = ergm(g ~ sum + mutual(form="product"), response = 'gifts', reference = ~Geometric)
fit1.1 = ergm(g ~ sum + mutual(form="product"), response = 'gifts', reference = ~Geometric)
g
fit1.1 = ergm(g ~ sum + mutual(form="absdiff"), response = 'gifts', reference = ~Geometric)
fit1.1 = ergm(g ~ sum + mutual(form="nabsdiff"), response = 'gifts', reference = ~Geometric)
summary(fit1.1)
fit1.1 = ergm(g ~ sum + mutual(form="min"), response = 'gifts', reference = ~Geometric)
summary(fit1.1)
fit1.1 = ergm(g ~ sum + mutual(form="nabsdiff"), response = 'gifts', reference = ~Geometric)
summary(fit1.1)
fit1.1 = ergm(g ~ nonzero + mutual(form="nabsdiff"), response = 'gifts', reference = ~Geometric)
fit1.1 = ergm(g ~ sum + mutual(form="nabsdiff"), response = 'gifts', reference = ~Geometric)
summary(fit1.1)
fit1.1 = ergm(g ~ sum + mutual(form="geometric"), response = 'gifts', reference = ~Geometric)
summary(fit1.1)
kl_households$hfish
kl_households$hgame
kl_households$hpigs
g %v% 'harv' = g %v% 'hgame' + g %v% 'hfish'
fit2.1 = ergm(g ~ sum + nodecov(attr='harv', form='sum'), response = 'gifts', reference = ~Geometric)
summary(fit2.1)
fit2.1
coef(fit2.1)
coef(fit2.1)[1]*5
coef(fit2.1)[1]*5 + coef(fit2.1)[2]*1.4
coef(fit2.1)[1]*5 + coef(fit2.1)[2]*1.5
coef(fit2.1)[2]*1.5
coef(fit2.1)[1]*10 + coef(fit2.1)[2]*1.5
data('KosterLeckie', package = 'rethinking')
library(statnet)
head(kl_dyads)
AB_dyads = kl_dyads[, c('hidA','hidB','giftsAB')]
BA_dyads = kl_dyads[, c('hidB','hidA','giftsBA')]
# rename
colnames(AB_dyads) = c('sender','receiver','gifts')
colnames(BA_dyads) = c('sender','receiver','gifts')
# filter and bind
el = rbind(AB_dyads[ !AB_dyads$gifts == 0, ],
BA_dyads[ !BA_dyads$gifts == 0, ])
g = network(el, vertex.attr = kl_households)
g
library(tidygraph)
library(ggraph)
g %>% as_tbl_graph() %>%
ggraph() +
geom_edge_link(aes(width=gifts))
summary(g ~ sum)
summary(g ~ sum, response = 'gifts')
sum(el$gifts)
# binomial with same number of edges as network
rbinom(n=427, size=1, prob=0.5)
hist(g %e% 'gifts')
hist(rpois(n=427, lambda = 1))
hist(rpois(n=427, lambda = 10))
hist( ifelse(rbinom(n=427,size=1,prob=0.5) == 0, 0 , rpois(n=427, lambda=2)),
main = '')
hist( ifelse(rbinom(n=427,size=1,prob=0.5) == 0, 0 , rpois(n=427, lambda=10)),
main = '')
max(el$gifts)
hist(rbinom(n=427, size=max(el$gifts), prob = 0.01))
hist(rgeom(n=427, prob=0.9))
hist(rgeom(n=427, prob=0.1))
fit0 = ergm(g ~ sum, response = 'gifts', reference = ~Geometric)
summary(fit0)
fit1.1 = ergm(g ~ sum + mutual(form="nabsdiff"), response = 'gifts', reference = ~Geometric)
summary(fit1.1)
g %v% 'harv' = g %v% 'hgame' + g %v% 'hfish'
fit2.1 = ergm(g ~ sum + nodecov(attr='harv', form='sum'), response = 'gifts', reference = ~Geometric)
fit2.1 = ergm(g ~ sum + nodecov(attr='harv', form='sum'), response = 'gifts', reference = ~Geometric)
summary(fit2.1)
summary(g ~ sum, response = 'gifts')
sum(el$gifts)
# binomial with same number of edges as network
rbinom(n=427, size=1, prob=0.5)
fit0 = ergm(g ~ sum, response = 'gifts', reference = ~Geometric)
summary(fit0)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
a <- 1+1
a
v <- c("i", "j", "k")
v
M <- matrix(c(0,0,0,
0,0,0,
0,0,0),
nrow = length(v),
dimnames = list(v,v))
M
M[1,2] <- 1
M[1,3] <- 1
M
M[3,1] <- 1
M
M[2,2] <- 1
M["j","j"] <- 1 #Same
M
diag(M) <- 0
class(M)
M
set.seed(777)
# How many nodes?
N <- 7
# How many edges?
N_edges <- N^2
# Use binomial distribution to simulate edges (coin flip)
simM <- matrix(rbinom(N_edges,
size=1,
prob=0.5),
nrow = N)
# No loops
diag(simM) <- 0
simM
setwd("~/Desktop/SENG") #Set working directory'
#setwd("~/Desktop/SENG") #Set working directory'
issuenet <- read.csv("IssueIssue_Data.csv", header=T)
class(issuenet)
issuenet <- read.csv("IssueIssue_Data.csv", header=T)
class(issuenet)
dim(issuenet) #19 rows, 19 columns! A square.
class(issuenet)
issuenet <- as.matrix(issuenet)
head(issuenet)
tail(issuenet)
rownames(issuenet) <- colnames(issuenet) #Add row names
head(issuenet)
colnames(issuenet) <- rownames(issuenet) <- paste0("i_", colnames(issuenet))
head(issuenet)
diag(issuenet) <- 0
issuenet
#View(issuenet) #Can't run View() in R markdown knit
diag(issuenet) <- 0
issuenet
#View(issuenet) #Can't run View() in R markdown knit
E <- rbind(c('i','k'),
c('j','j'),
c('k','i'))
class(E)
colnames(E) <- c('Sender','Receiver')
E
class(E)
E <- rbind(E, c('i','j'))
E
E <- E[-4,]
E
set.seed(777)
N <- letters[1:5]
#or
N <- c("a","b","c","d","e")
simE <- expand.grid(N,N)
# ?expand.grid #help on this function.
simE
simE$Edge <- rbinom(nrow(simE),
size = 1,
prob = 0.5)
dim(simE)
head(simE) #notice 3 columns, including presence/absence of edge
simE <- simE[!simE$Edge == 0 & !simE$Var1 == simE$Var2, 1:2] #Only include edges that have a value, and that aren't loops, only show Columns 1 and 2
head(simE)
aa <- read.csv("actor-actor_edgelist.csv")
blogdown:::new_post_addin()
blogdown:::new_post_addin()
