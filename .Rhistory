scale_edge_color_manual(values = mypal) +
geom_node_point(aes(color=Neighborhood, alpha=Neighborhood), size=2) +
scale_color_manual(values = mypal) +
scale_alpha_manual(values = c(0.5,0.5,0.01)) +
theme_void() +
ggtitle('N_egos = 10')) /
(egonetworks(N=500, params = params, N_egos = 60)[[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood), width=1) +
scale_edge_color_manual(values = mypal) +
geom_node_point(aes(color=Neighborhood, alpha=Neighborhood), size=2) +
scale_color_manual(values = mypal) +
scale_alpha_manual(values = c(0.5,0.5,0.05)) +
theme_void() +
ggtitle('N_egos = 60'))
g500 <- asIgraph(egonetworks(N=500, params = params, N_egos = 10)[[1]])
df <- data.frame(
Network = c('Complete','60Egos','10Egos'),
Density = c(graph.density(g500), graph.density(g60), graph.density(g10)),
AvgPathLength = c(average.path.length(g500), average.path.length(g60), average.path.length(g10)),
AvgDegree = c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10))),
#AvgCloseness = c( mean(closeness(g500)), mean(closeness(g60)), mean(closeness(g10))),
#AvgBetweeness = c( mean(betweenness(g500, directed = F)),
#                   mean(betweenness(g60, directed = F)),
#                   mean(betweenness(g10, directed = F))),
Connectedness = c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10)))
)
g500 <- asIgraph(egonetworks(N=500, params = params, N_egos = 10)[[1]])
df <- data.frame(
Network = c('Complete','60Egos','10Egos'),
Density = c(graph.density(g500), graph.density(g60), graph.density(g10)),
AvgPathLength = c(average.path.length(g500), average.path.length(g60), average.path.length(g10)),
AvgDegree = c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10))),
#AvgCloseness = c( mean(closeness(g500)), mean(closeness(g60)), mean(closeness(g10))),
#AvgBetweeness = c( mean(betweenness(g500, directed = F)),
#                   mean(betweenness(g60, directed = F)),
#                   mean(betweenness(g10, directed = F))),
Connectedness = c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10)))
)
params <- c(-8,4)
egonet10 <- egonetworks(N=500, params = params, N_egos = 10)[[3]]
egonet60 <- egonetworks(N=500, params = params, N_egos = 60)[[3]]
# add names to egonetworks
for(i in seq_along(egonet10)) {
V(egonet10[[i]])$name <- V(egonet10[[i]])$vid
}
for(i in seq_along(egonet60)) {
V(egonet60[[i]])$name <- V(egonet60[[i]])$vid
}
# get edgelists
el10 <- dplyr::bind_rows(
lapply(
lapply(egonet10, get.edgelist), as.data.frame) )
el60 <- dplyr::bind_rows(
lapply(
lapply(egonet60, get.edgelist), as.data.frame) )
# graph the edgelist without duplicates
g10 <- graph.data.frame(el10[ !duplicated(el10), ])
g60 <- graph.data.frame(el60[ !duplicated(el60), ])
g500
g60
g10
g500
vcount(g500)
df <- data.frame(
Network = c('Complete','60Egos','10Egos'),
N_nodes = c(vcount(g500), vcount(g60), vcount(g10)),
Density = c(graph.density(g500), graph.density(g60), graph.density(g10)),
AvgPathLength = c(average.path.length(g500), average.path.length(g60), average.path.length(g10)),
AvgDegree = c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10))),
#AvgCloseness = c( mean(closeness(g500)), mean(closeness(g60)), mean(closeness(g10))),
#AvgBetweeness = c( mean(betweenness(g500, directed = F)),
#                   mean(betweenness(g60, directed = F)),
#                   mean(betweenness(g10, directed = F))),
Connectedness = c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10)))
)
graph.density(g500)
ph.density(g60)
graph.density(g60)
graph.density(g10)
g500 <- asIgraph(egonetworks(N=500, params = params, N_egos = 10)[[1]])
df <- data.frame(
Network = c('Complete','60Egos','10Egos'),
N_nodes = c(vcount(g500), vcount(g60), vcount(g10)),
Density = c(graph.density(g500), graph.density(g60), graph.density(g10)),
AvgPathLength = c(average.path.length(g500), average.path.length(g60), average.path.length(g10)),
AvgDegree = c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10))),
#AvgCloseness = c( mean(closeness(g500)), mean(closeness(g60)), mean(closeness(g10))),
#AvgBetweeness = c( mean(betweenness(g500, directed = F)),
#                   mean(betweenness(g60, directed = F)),
#                   mean(betweenness(g10, directed = F))),
Connectedness = c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10)))
)
average.path.length(g500)
average.path.length(g60)
average.path.length(g10)
df <- data.frame(
Network = c('Complete','60Egos','10Egos'),
N_nodes = c(vcount(g500), vcount(g60), vcount(g10)),
Density = c(graph.density(g500), graph.density(g60), graph.density(g10)),
AvgPathLength = c(average.path.length(g500), average.path.length(g60), average.path.length(g10)),
AvgDegree = c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10))),
#AvgCloseness = c( mean(closeness(g500)), mean(closeness(g60)), mean(closeness(g10))),
#AvgBetweeness = c( mean(betweenness(g500, directed = F)),
#                   mean(betweenness(g60, directed = F)),
#                   mean(betweenness(g10, directed = F))),
Connectedness = c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10)))
)
c(graph.density(g500), graph.density(g60), graph.density(g10))
c(vcount(g500), vcount(g60), vcount(g10))
c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10))
)
c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10)))
df <- data.frame(
Network = c('Complete','60Egos','10Egos'),
N_nodes = c(vcount(g500), vcount(g60), vcount(g10)),
Density = c(graph.density(g500), graph.density(g60), graph.density(g10)),
AvgPathLength = c(average.path.length(g500), average.path.length(g60), average.path.length(g10)),
#AvgDegree = c( mean(degree(g500)), mean(degree(g60)), mean(degree(g10)))  ,
#AvgCloseness = c( mean(closeness(g500)), mean(closeness(g60)), mean(closeness(g10))),
#AvgBetweeness = c( mean(betweenness(g500, directed = F)),
#                   mean(betweenness(g60, directed = F)),
#                   mean(betweenness(g10, directed = F))),
Connectedness = c(connectedness(asNetwork(g500)), connectedness(asNetwork(g60)), connectedness(asNetwork(g10)))
)
df
library(tidyverse)
df %>% gather(key=key,value=value,-Network) %>%
ggplot() +
geom_point(aes(value, key, color=Network, shape=Network)) +
#facet_wrap(~key, scales = 'free') +
scale_shape_manual(values = c(19,19,4)) +
theme_classic()
data.frame(
Degree500 = degree(g500)
)
data.frame(
Degree500 = graph.strength(g500)
)
data.frame(
Degree500 = graph.strength(g500),
Degree60  = graph.strength(g60),
Degree10  = graph.strength(g10)
)
plot(NULL, xlim=c(0,100), ylim=c(0,1))
lines(density(graph.strength(g500)))
plot(NULL, xlim=c(0,100), ylim=c(0,1))
lines(density(graph.strength(g500)))
density(graph.strength(g500))
plot(NULL, xlim=c(0,100), ylim=c(0,1))
lines(density(graph.strength(g500)))
plot(NULL, xlim=c(0,100), ylim=c(0,1))
lines(density(graph.strength(g500)))
lines(density(graph.strength(g60)))
lines(density(graph.strength(g10)))
plot(NULL, xlim=c(0,10), ylim=c(0,1))
lines(density(graph.strength(g500)))
lines(density(graph.strength(g60)))
lines(density(graph.strength(g10)))
plot(NULL, xlim=c(0,10), ylim=c(0,1))
lines(density(graph.strength(g500)))
lines(density(graph.strength(g60)), col='red')
lines(density(graph.strength(g10)))
plot(NULL, xlim=c(0,10), ylim=c(0,1))
lines(density(graph.strength(g500)))
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,10), ylim=c(0,1))
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,10), ylim=c(0,0.6))
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,10), ylim=c(0,0.6), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,10), ylim=c(0,0.6), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,9), ylim=c(0,0.6), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,10), ylim=c(0,0.6), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,8), ylim=c(0,0.6), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,8), ylim=c(0,0.5), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,8), ylim=c(0,0.5), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,8), ylim=c(0,0.5), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
plot(NULL, xlim=c(0,8), ylim=c(0,0.5), xlab='Degree centrality', ylab='Density')
lines(density(graph.strength(g500)), lty=2)
lines(density(graph.strength(g60)), col='tomato')
lines(density(graph.strength(g10)), col='#3300ff')
set.seed(7)
g <- expand.grid('Ego', sample(LETTERS[1:10], 3, replace = F))
nei <- g$Var2
el <- rbind(g,
expand.grid(nei[1], sample(LETTERS[1:7], 3, replace = F)),
expand.grid(nei[2], sample(letters[2:10], 3, replace = F)),
expand.grid(nei[3], sample(LETTERS[3:10], 3, replace = F)))
as_tbl_graph(el) %>%
activate(nodes) %>%
mutate(
IsEgo = ifelse(name == 'Ego', 'Ego',
ifelse(name %in% nei, '1st order neighbor', '2nd order neighbor')),
egolab = ifelse(name == 'Ego', 'Ego',
ifelse(name %in% nei, '', ''))) %>%
ggraph('stress') +
geom_edge_link0() +
geom_node_point(aes(fill=IsEgo, size=IsEgo), pch=21) +
geom_node_text(aes(label=egolab), repel = T) +
theme_void() +
scale_fill_manual(values = c('magenta','white','#3300ff')) +
scale_size_manual(values = c(3,3,5)) +
labs(fill = '', size = '')
####################################
# Egocentric Networks
####################################
library(igraph)
library(statnet)
library(tidygraph)
library(ggraph)
library(ggforce)
library(patchwork)
library(intergraph)
egonetwork <- function(
# SETTINGS
N=30,
N_egos=3,
formula="net ~ edges + nodematch('group')",
groups = 4,
params=c(-3.5,3),
seed=777,
directed = F,
select_egos=F,
egoIds) {
# SIMULATION
set.seed(seed)
n <- N
net <- network(n, directed = directed, density = 0)
net %v% 'group' <- sample(1:groups, size = n, replace = T)
g <- simulate(as.formula(formula), coef=params, seed = seed)
# CONVERT TO IGRAPH
ig <- asIgraph(g)
# SAMPLE EGOS, FIND NEIGHBORHOODS
if (select_egos == F) {
egos <- sample(V(ig)$vertex.names, size=N_egos, replace = F)
first <- ego(ig, order=1, nodes=egos, mindist = 0)
second <- ego(ig, order=2, nodes=egos, mindist = 1)
} else if (select_egos == T) {
egos <- egoIds
first <- ego(ig, order=1, nodes=egos, mindist = 0)
second <- ego(ig, order=2, nodes=egos, mindist = 1)
}
# CREATE ATTRIBUTES
tg <- ig %>%
as_tbl_graph() %>%
activate(nodes) %>%
mutate(is.ego =  as.factor(ifelse( vertex.names %in% egos, 2,
ifelse( vertex.names %in% unlist(first), 1, 0))),
egolab = ifelse( vertex.names %in% egos, paste('Ego', vertex.names), '' )) %>%
activate(edges) %>%
mutate(Neighborhood = as.factor(ifelse(from %in% egos, 2,
ifelse(to %in% egos, 2,
ifelse( from %in% unlist(first), 1,
ifelse( to %in% unlist(first), 1,  0 ))))))
# SAVE EGO NETWORKS
E(ig)$id <- seq_len(ecount(ig))
V(ig)$vid <- seq_len(vcount(ig))
egographs <- make_ego_graph(ig,order=2,nodes=egos)
return(list(g, tg, egographs))
}
egonetwork()
egonetwork(N=80,
params = c(-4,3),
N_egos = 20) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=is.ego)) +
geom_node_text(aes(label=egolab))
egonetwork(N=80,
params = c(-4,3),
N_egos = 20) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=is.ego)) +
geom_node_text(aes(label=egolab)) +
theme_void()
egonetwork(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=is.ego)) +
geom_node_text(aes(label=egolab)) +
theme_void()
egonetwork(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=is.ego)) +
geom_node_label(aes(label=egolab)) +
theme_void()
####################################
# Egocentric Networks
####################################
library(igraph)
library(statnet)
library(tidygraph)
library(ggraph)
library(ggforce)
library(patchwork)
library(intergraph)
egonetworks <- function(
# SIMULATION SETTINGS
N=30,
directed = F,
formula="net ~ edges + nodematch('group')",
params=c(-3.5,3),
groups = 4,
# EGONETWORK SETTINGS
select_egos=F,
N_egos=3,
egoIds,
seed=777)
{
# SIMULATE A COMPLETE NETWORK
set.seed(seed)
n <- N
net <- network(n, directed = directed, density = 0)
net %v% 'group' <- sample(1:groups, size = n, replace = T)
g <- simulate(as.formula(formula), coef=params, seed = seed)
# CONVERT TO IGRAPH
ig <- asIgraph(g)
# SAMPLE EGOS, FIND NEIGHBORHOODS
if (select_egos == F) {
egos <- sample(V(ig)$vertex.names, size=N_egos, replace = F)
first <- ego(ig, order=1, nodes=egos, mindist = 0)
second <- ego(ig, order=2, nodes=egos, mindist = 1)
} else if (select_egos == T) {
egos <- egoIds
first <- ego(ig, order=1, nodes=egos, mindist = 0)
second <- ego(ig, order=2, nodes=egos, mindist = 1)
}
# CREATE ATTRIBUTES
tg <- ig %>%
as_tbl_graph() %>%
activate(nodes) %>%
mutate(Neighborhood =  as.factor(ifelse( vertex.names %in% egos, 1,
ifelse( vertex.names %in% unlist(first) | vertex.names %in% unlist(second), 2, 'Unobserved'))),
egolab = ifelse( vertex.names %in% egos, paste('Ego', vertex.names), '' ),
IsEgo = ifelse(vertex.names %in% egos, 'Yes','No')) %>%
activate(edges) %>%
mutate(Neighborhood = as.factor(ifelse(from %in% egos, 1,
ifelse(to %in% egos, 1,
ifelse( from %in% unlist(first), 2,
ifelse( to %in% unlist(first), 2,  'Unobserved' ))))))
# SAVE EGO NETWORKS
E(ig)$id <- seq_len(ecount(ig))
V(ig)$vid <- seq_len(vcount(ig))
egographs <- make_ego_graph(ig,order=2,nodes=egos)
# RETURN COMPLETE, TIDYGRAPH, AND EGONETWORKS IN A LIST
return(list(g, tg, egographs))
}
egonetwork()
egonetwork(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=is.ego)) +
geom_node_label(aes(label=egolab)) +
theme_void()
egonetwork(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=Neighborhood, shape=IsEgo), size=2) +
geom_node_label(aes(label=egolab), repel = T) +
theme_void() + #theme(legend.position = 'none') +
scale_edge_color_manual(values=c('#3300ff','magenta','#00000033')) +
scale_color_manual(values=c('#3300ff','magenta','#00000033'))
egonetworks <- function(
# SIMULATION SETTINGS
N=30,
directed = F,
formula="net ~ edges + nodematch('group')",
params=c(-3.5,3),
groups = 4,
# EGONETWORK SETTINGS
select_egos=F,
N_egos=3,
egoIds,
seed=777)
{
# SIMULATE A COMPLETE NETWORK
set.seed(seed)
n <- N
net <- network(n, directed = directed, density = 0)
net %v% 'group' <- sample(1:groups, size = n, replace = T)
g <- simulate(as.formula(formula), coef=params, seed = seed)
# CONVERT TO IGRAPH
ig <- asIgraph(g)
# SAMPLE EGOS, FIND NEIGHBORHOODS
if (select_egos == F) {
egos <- sample(V(ig)$vertex.names, size=N_egos, replace = F)
first <- ego(ig, order=1, nodes=egos, mindist = 0)
second <- ego(ig, order=2, nodes=egos, mindist = 1)
} else if (select_egos == T) {
egos <- egoIds
first <- ego(ig, order=1, nodes=egos, mindist = 0)
second <- ego(ig, order=2, nodes=egos, mindist = 1)
}
# CREATE ATTRIBUTES
tg <- ig %>%
as_tbl_graph() %>%
activate(nodes) %>%
mutate(Neighborhood =  as.factor(ifelse( vertex.names %in% egos, 1,
ifelse( vertex.names %in% unlist(first) | vertex.names %in% unlist(second), 2, 'Unobserved'))),
egolab = ifelse( vertex.names %in% egos, paste('Ego', vertex.names), '' ),
IsEgo = ifelse(vertex.names %in% egos, 'Yes','No')) %>%
activate(edges) %>%
mutate(Neighborhood = as.factor(ifelse(from %in% egos, 1,
ifelse(to %in% egos, 1,
ifelse( from %in% unlist(first), 2,
ifelse( to %in% unlist(first), 2,  'Unobserved' ))))))
# SAVE EGO NETWORKS
E(ig)$id <- seq_len(ecount(ig))
V(ig)$vid <- seq_len(vcount(ig))
egographs <- make_ego_graph(ig,order=2,nodes=egos)
# RETURN COMPLETE, TIDYGRAPH, AND EGONETWORKS IN A LIST
return(list(g, tg, egographs))
}
egonetwork()
egonetwork(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=Neighborhood, shape=IsEgo), size=2) +
geom_node_label(aes(label=egolab), repel = T) +
theme_void() + #theme(legend.position = 'none') +
scale_edge_color_manual(values=c('#3300ff','magenta','#00000033')) +
scale_color_manual(values=c('#3300ff','magenta','#00000033'))
egonetwork(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=Neighborhood), size=2) +
geom_node_label(aes(label=egolab), repel = T) +
theme_void() + #theme(legend.position = 'none') +
scale_edge_color_manual(values=c('#3300ff','magenta','#00000033')) +
scale_color_manual(values=c('#3300ff','magenta','#00000033'))
egonetwork(N=80,
params = c(-4,3),
N_egos = 3)
egonetwork(N=80,
params = c(-4,3),
N_egos = 3)[[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=Neighborhood), size=2) +
geom_node_label(aes(label=egolab), repel = T) +
theme_void() + #theme(legend.position = 'none') +
scale_edge_color_manual(values=c('#3300ff','magenta','#00000033')) +
scale_color_manual(values=c('#3300ff','magenta','#00000033'))
egonetwork(N=80,
params = c(-4,3),
N_egos = 3)[[2]]
egonetworks()
egonetworks(N=80,
params = c(-4,3),
N_egos = 3) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=Neighborhood, shape=IsEgo), size=2) +
geom_node_label(aes(label=egolab), repel = T) +
theme_void() + #theme(legend.position = 'none') +
scale_edge_color_manual(values=c('#3300ff','magenta','#00000033')) +
scale_color_manual(values=c('#3300ff','magenta','#00000033'))
egonetworks(N=80,
params = c(-4,3),
N_egos = 20) [[2]] %>%
ggraph() +
geom_edge_link0(aes(color=Neighborhood)) +
geom_node_point(aes(color=Neighborhood, shape=IsEgo), size=2) +
geom_node_label(aes(label=egolab), repel = T) +
theme_void() + #theme(legend.position = 'none') +
scale_edge_color_manual(values=c('#3300ff','magenta','#00000033')) +
scale_color_manual(values=c('#3300ff','magenta','#00000033'))
blogdown::serve_site()
